#include <SFML/Graphics.hpp>
#include <SFML/Audio.hpp>
#include <iostream>
#include <cstdlib>
#include <ctime>

const int MAX_BULLETS = 100;
const int MAX_ENEMY_BULLETS = 100;
const int MAX_ENEMIES = 3;

struct Bullet {
    sf::RectangleShape shape;
    bool isActive;

    Bullet() : isActive(false) {
        shape.setSize(sf::Vector2f(5, 20));
        shape.setFillColor(sf::Color::Yellow);
    }
};

struct EnemyBullet {
    sf::RectangleShape shape;
    bool isActive;

    EnemyBullet() : isActive(false) {
        shape.setSize(sf::Vector2f(5, 20));
        shape.setFillColor(sf::Color::Red);
    }
};

struct Enemy {
    sf::Sprite sprite;
    bool isActive;

    Enemy() : isActive(true) {}
};

int main() {
    std::srand(static_cast<unsigned>(std::time(0)));

    sf::RenderWindow window(sf::VideoMode(800, 800), "Proyecto Final");

    sf::Texture backgroundTexture0;
    if (!backgroundTexture0.loadFromFile("fondo_inicio.png")) {
        std::cerr << "Error al cargar la textura del fondo" << std::endl;
        return -1;
    }
    sf::Sprite backgroundSprite0;
    backgroundSprite0.setTexture(backgroundTexture0);
    backgroundSprite0.setScale(
        window.getSize().x / backgroundSprite0.getGlobalBounds().width,
        window.getSize().y / backgroundSprite0.getGlobalBounds().height
    );
    
    sf::Texture backgroundTexture;
    if (!backgroundTexture.loadFromFile("fondo1_pikillaqta.jpg")) {
        std::cerr << "Error al cargar la textura del fondo" << std::endl;
        return -1;
    }
    sf::Sprite backgroundSprite;
    backgroundSprite.setTexture(backgroundTexture);
    backgroundSprite.setScale(
        window.getSize().x / backgroundSprite.getGlobalBounds().width,
        window.getSize().y / backgroundSprite.getGlobalBounds().height
    );

    sf::Texture texture;
    if (!texture.loadFromFile("pc.png")) {
        std::cerr << "Error al cargar la textura de la nave" << std::endl;
        return -1;
    }
    sf::Sprite sprite;
    sprite.setTexture(texture);
    sprite.setPosition(300, 600);
    float speed = 0.3f;
    sprite.setScale(1.8f, 1.8f);

    sf::Texture enemyTexture1, enemyTexture2, enemyTexture3;
    if (!enemyTexture1.loadFromFile("urpu.png")) {
        std::cerr << "Error al cargar la textura del enemigo 1" << std::endl;
        return -1;
    }
    if (!enemyTexture2.loadFromFile("figura_zoomorfa.png")) {
        std::cerr << "Error al cargar la textura del enemigo 2" << std::endl;
        return -1;
    }
    if (!enemyTexture3.loadFromFile("urpu.png")) {
        std::cerr << "Error al cargar la textura del enemigo 3" << std::endl;
        return -1;
    }

    Enemy enemies[MAX_ENEMIES];
    sf::Clock enemyClocks[MAX_ENEMIES];
    sf::Time enemyChangeDirectionTimes[MAX_ENEMIES] = { sf::seconds(2.0f), sf::seconds(1.0f), sf::seconds(3.0f) };
    float enemySpeeds[MAX_ENEMIES] = { 0.2f, 0.2f, 0.2f };

    enemies[0].sprite.setTexture(enemyTexture1);
    enemies[0].sprite.setPosition(100, 15);
    enemies[0].sprite.setScale(0.7f, 0.7f);

    enemies[1].sprite.setTexture(enemyTexture2);
    enemies[1].sprite.setPosition(300, -25);
    enemies[1].sprite.setScale(0.3f, 0.3f);

    enemies[2].sprite.setTexture(enemyTexture3);
    enemies[2].sprite.setPosition(500, 15);
    enemies[2].sprite.setScale(0.7f, 0.7f);

    Bullet bullets[MAX_BULLETS];
    sf::Clock bulletClock;
    sf::Time bulletCooldown = sf::seconds(1.0f);

    EnemyBullet enemyBullets[MAX_ENEMY_BULLETS];
    sf::Clock enemyBulletClock;
    sf::Time enemyBulletCooldown = sf::seconds(1.0f);

    sf::Font font;
    if (!font.loadFromFile("PressStart2P-Regular.ttf")) {
        std::cerr << "Error al cargar la fuente" << std::endl;
        return -1;
    }

    sf::Text startText2("Presiona ENTER para comenzar", font, 25);
    startText2.setFillColor(sf::Color::Blue);
    startText2.setPosition(50, 190);
    
    sf::Text startText3("Integrantes", font, 30);
    startText3.setFillColor(sf::Color::Red);
    startText3.setPosition(430, 700);
    
    sf::Text startText4("Angie Mina Ishuiza", font, 20);
    startText4.setFillColor(sf::Color::Black);
    startText4.setPosition(400, 740);
    
    sf::Text startText5("Daniel Justo", font, 20);
    startText5.setFillColor(sf::Color::Black);
    startText5.setPosition(450, 770);

    sf::Font font1;
    if (!font1.loadFromFile("Anton-Regular.ttf")) {
        std::cerr << "Error al cargar la fuente" << std::endl;
        return -1;
    }
    sf::Text lifeText("Vida", font1, 30);
    lifeText.setFillColor(sf::Color::White);
    lifeText.setPosition(50, 710);
    
    int playerLifeCounter = 100;
    sf::RectangleShape lifeBarBackground(sf::Vector2f(300, 20));
    lifeBarBackground.setFillColor(sf::Color::Red);
    lifeBarBackground.setPosition(50, 750);

    sf::RectangleShape lifeBar(sf::Vector2f(300, 20));
    lifeBar.setFillColor(sf::Color::Green);
    lifeBar.setPosition(50, 750);

    bool isGameStarted = false;
    bool isGameOver = false;
    sf::Clock gameOverClock;

    sf::Text gameOverText("Game Over", font, 50);
    gameOverText.setFillColor(sf::Color::Red);
    gameOverText.setPosition(200, 400);

    while (window.isOpen()) {
        sf::Event event;
        while (window.pollEvent(event)) {
            if (event.type == sf::Event::Closed) {
                window.close();
            }
        }

        if (!isGameStarted) {
            if (sf::Keyboard::isKeyPressed(sf::Keyboard::Return)) {
                isGameStarted = true;
            }
        } else if (!isGameOver) {
            if (sf::Keyboard::isKeyPressed(sf::Keyboard::Left)) {
                if (sprite.getPosition().x > 0) {
                    sprite.move(-speed, 0);
                }
            }
            if (sf::Keyboard::isKeyPressed(sf::Keyboard::Right)) {
                if (sprite.getPosition().x + sprite.getGlobalBounds().width < window.getSize().x) {
                    sprite.move(speed, 0);
                }
            }

            if (sf::Keyboard::isKeyPressed(sf::Keyboard::Space) && bulletClock.getElapsedTime() >= bulletCooldown) {
                for (int i = 0; i < MAX_BULLETS; ++i) {
                    if (!bullets[i].isActive) {
                        bullets[i].shape.setPosition(sprite.getPosition().x + sprite.getGlobalBounds().width / 2 - 2.5f, sprite.getPosition().y);
                        bullets[i].isActive = true;
                        bulletClock.restart();
                        break;
                    }
                }
            }

            for (int i = 0; i < MAX_BULLETS; ++i) {
                if (bullets[i].isActive) {
                    bullets[i].shape.move(0, -0.2f);
                    if (bullets[i].shape.getPosition().y < 0) {
                        bullets[i].isActive = false;
                    }
                }
            }

            if (enemyBulletClock.getElapsedTime() >= enemyBulletCooldown) {
                for (int i = 0; i < MAX_ENEMY_BULLETS; ++i) {
                    if (!enemyBullets[i].isActive) {
                        int randomEnemy = std::rand() % MAX_ENEMIES;
                        if (!enemies[randomEnemy].isActive) continue;
                        sf::Sprite* enemySprite = &enemies[randomEnemy].sprite;
                        enemyBullets[i].shape.setPosition(enemySprite->getPosition().x + enemySprite->getGlobalBounds().width / 2 - 2.5f, enemySprite->getPosition().y + enemySprite->getGlobalBounds().height);
                        enemyBullets[i].isActive = true;
                        enemyBulletClock.restart();
                        break;
                    }
                }
            }

            for (int i = 0; i < MAX_ENEMY_BULLETS; ++i) {
                if (enemyBullets[i].isActive) {
                    enemyBullets[i].shape.move(0, 0.2f);
                    if (enemyBullets[i].shape.getPosition().y > window.getSize().y) {
                        enemyBullets[i].isActive = false;
                    }
                }
            }

            for (int i = 0; i < MAX_ENEMIES; ++i) {
                if (enemyClocks[i].getElapsedTime() >= enemyChangeDirectionTimes[i]) {
                    enemySpeeds[i] = (std::rand() % 2 == 0 ? -1.0f : 1.0f) * (0.2f + static_cast<float>(std::rand()) / (static_cast<float>(RAND_MAX / 0.2f)));
                    enemyClocks[i].restart();
                }
                if (enemies[i].isActive) {
                    enemies[i].sprite.move(enemySpeeds[i], 0);
                    if (enemies[i].sprite.getPosition().x < 0 || enemies[i].sprite.getPosition().x + enemies[i].sprite.getGlobalBounds().width > window.getSize().x) {
                        enemySpeeds[i] = -enemySpeeds[i];
                    }
                }
            }

            for (int i = 0; i < MAX_BULLETS; ++i) {
                if (bullets[i].isActive) {
                    for (int j = 0; j < MAX_ENEMIES; ++j) {
                        if (bullets[i].shape.getGlobalBounds().intersects(enemies[j].sprite.getGlobalBounds()) && enemies[j].isActive) {
                            bullets[i].isActive = false;
                            enemies[j].isActive = false;
                            enemies[j].sprite.setPosition(-100, -100); // Mover enemigo fuera de la pantalla
                        }
                    }
                }
            }

            for (int i = 0; i < MAX_ENEMY_BULLETS; ++i) {
                if (enemyBullets[i].isActive) {
                    if (enemyBullets[i].shape.getGlobalBounds().intersects(sprite.getGlobalBounds())) {
                        enemyBullets[i].isActive = false;
                        playerLifeCounter -= 20;
                        if (playerLifeCounter <= 0) {
                            isGameOver = true;
                            gameOverClock.restart();
                        }
                    }
                }
            }

            float lifeRatio = static_cast<float>(playerLifeCounter) / 100.0f;
            lifeBar.setSize(sf::Vector2f(300 * lifeRatio, 20));
            lifeBar.setFillColor(sf::Color(255 * (1 - lifeRatio), 255 * lifeRatio, 0));
        }

        window.clear();
        if (!isGameStarted) {
            window.draw(backgroundSprite0);
            window.draw(startText2);
            window.draw(startText3);
            window.draw(startText4);
            window.draw(startText5);
        } else if (isGameOver) {
            window.draw(backgroundSprite0);
            window.draw(gameOverText);
        } else {
            window.draw(backgroundSprite);
            window.draw(sprite);
            for (int i = 0; i < MAX_BULLETS; ++i) {
                if (bullets[i].isActive) {
                    window.draw(bullets[i].shape);
                }
            }
            for (int i = 0; i < MAX_ENEMY_BULLETS; ++i) {
                if (enemyBullets[i].isActive) {
                    window.draw(enemyBullets[i].shape);
                }
            }
            for (int i = 0; i < MAX_ENEMIES; ++i) {
                if (enemies[i].isActive) {
                    window.draw(enemies[i].sprite);
                }
            }
            window.draw(lifeText);
            window.draw(lifeBarBackground);
            window.draw(lifeBar);
        }

        window.display();
    }

    return 0;
}
